- small, focused commits make it easier for other developers to review, and keep us accountable to really understanding what is changing in our code.

- Vertical Slice: 
  We chose this story as our first story because it allows us to build out a vertical slice of our application. It touches all layers of our code: it has a user interface aspect (the list screen), a data layer aspect (where the restaurants are loaded and stored), and an API client aspect (the HTTP request to load the restaurants). It also minimizes other work: we aren't building authentication now, and we aren't handling restaurant loading edge cases yet in this story. The point of a vertical slice is to get something in all layers of your application built out, to ensure they all work together.

- outside-in testing: 
  With outside-in testing, we build the outside first, which in this case is our user interface components

- Write the code you wish you had: 
  And a common principle is to write the code you wish you had. What does that mean in our case? Well, when we created our app, we were given an <App /> component. Do we want to put our user interface directly in there? No, it's best to save the <App /> component for app-wide concerns such as a title bar that we'll add soon. Instead, it would be great if we had a <RestaurantScreen /> component that would contain everything specific to our restaurants. We wish we had it, so let's add it to App.js

- unit tests: 
  unit tests are for driving out logic. This is why we wrote this structural code directly under the guidance of the E2E test.

- End-to-end testing every edge case would be slow